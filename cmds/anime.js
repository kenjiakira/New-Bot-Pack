const translate = require('translate-google');
const { getInfoFromName } = require('mal-scraper');
const request = require('request');
const fs = require('fs');

module.exports = {
    name: "anime",
    info: "T√¨m ki·∫øm th√¥ng tin Anime.",
    dev: "ZiaRein",
    onPrefix: true,
    dmUser: false,
    nickName: ["anime"],
    usages: "anime [t√™n anime c·∫ßn t√¨m]",
    cooldowns: 5,

    onLaunch: async function ({ api, event, target, actions }) {
        const query = target.join(" ").trim(); 
        
        if (!query) {
            return await actions.reply("‚ùé Vui l√≤ng cung c·∫•p t√™n anime c·∫ßn t√¨m ki·∫øm.\nUsage: anime [t√™n anime c·∫ßn t√¨m]");
        }

        try {
            const Anime = await getInfoFromName(query);
            const getURL = Anime.picture;
            const ext = getURL.substring(getURL.lastIndexOf(".") + 1);

            if (!Anime.genres || Anime.genres.length === 0) Anime.genres = ["Kh√¥ng c√≥"];

            const title = Anime.title;
            const japTitle = Anime.japaneseTitle;
            const type = Anime.type;
            const status = Anime.status;
            const premiered = Anime.premiered;
            const broadcast = Anime.broadcast;
            const aired = Anime.aired;
            const producers = Anime.producers;
            const studios = Anime.studios;
            const source = Anime.source;
            const episodes = Anime.episodes;
            const duration = Anime.duration;
            const genres = Anime.genres.join(", ");
            const popularity = Anime.popularity;
            const ranked = Anime.ranked;
            const score = Anime.score;
            const rating = Anime.rating;
            const synopsis = Anime.synopsis;
            const url = Anime.url;

            const translatedSynopsis = await translate(synopsis, { from: 'en', to: 'vi' });

            const callback = function () {
                actions.send({
                    body: `üìñ TH√îNG TIN ANIME\n\nüé• T√™n: ${title}\nüéå T√™n ti·∫øng Nh·∫≠t: ${japTitle}\nüì∫ Lo·∫°i: ${type}\n‚ö°Ô∏è Tr·∫°ng th√°i: ${status}\nüóìÔ∏è Kh·ªüi chi·∫øu: ${premiered}\nüì° Ph√°t s√≥ng: ${broadcast}\nüìÖ Ra m·∫Øt: ${aired}\nüé¨ Nh√† s·∫£n xu·∫•t: ${producers}\nüéì Studio: ${studios}\nüìù Ngu·ªìn: ${source}\nüéûÔ∏è S·ªë t·∫≠p: ${episodes}\n‚åõÔ∏è Th·ªùi l∆∞·ª£ng: ${duration}\nüé≠ Th·ªÉ lo·∫°i: ${genres}\nüåü ƒê·ªô ph·ªï bi·∫øn: ${popularity}\nüîù X·∫øp h·∫°ng: ${ranked}\nüéñÔ∏è ƒêi·ªÉm s·ªë: ${score}\nüîû ƒê√°nh gi√°: ${rating}\n\nüìù N·ªôi dung:\n${translatedSynopsis}\n\nüåê Link chi ti·∫øt: ${url}`,
                    attachment: fs.createReadStream(__dirname + `/cache/mal.${ext}`)
                }, event.threadID, () => {
                    if (fs.existsSync(__dirname + `/cache/mal.${ext}`)) {
                        fs.unlinkSync(__dirname + `/cache/mal.${ext}`);
                    }
                }, event.messageID);
            };

            request(getURL).pipe(fs.createWriteStream(__dirname + `/cache/mal.${ext}`)).on("close", callback);

        } catch (err) {
            return await actions.reply("‚ö†Ô∏è " + err.message);
        }
    }
};
