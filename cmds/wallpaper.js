const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const { image } = require('image-downloader');

const UNSPLASH_ACCESS_KEY = 'USC-YIdoZxMRxblaePKXocUs6Up7EAbqDbInZ0z5r4U';

const cacheDir = path.resolve(__dirname, 'cache');
if (!fs.existsSync(cacheDir)) {
    fs.mkdirsSync(cacheDir);
}

const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

async function getRandomWallpapers(count = 4, orientation = 'landscape') {
    try {
        const response = await axios.get('https://api.unsplash.com/photos/random', {
            params: {
                count: count,
                orientation: orientation,
                query: 'wallpaper' 
            },
            headers: {
                'Authorization': `Client-ID ${UNSPLASH_ACCESS_KEY}`
            }
        });
        if (response.data.length === 0) {
            throw new Error('Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh ng·∫´u nhi√™n.');
        }
        return response.data.map(photo => photo.urls.full);
    } catch (error) {
        throw new Error(`L·ªói khi l·∫•y h√¨nh n·ªÅn: ${error.message}`);
    }
}

async function downloadImage(url, outputPath, retries = 3) {
    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            await image({ url, dest: outputPath });
            console.log(`T·∫£i ·∫£nh th√†nh c√¥ng t·ª´ ${url}`);
            return true; 
        } catch (error) {
            console.error(`Th·ª≠ l·∫°i t·∫£i ·∫£nh t·ª´ ${url}, l·∫ßn th·ª© ${attempt} g·∫∑p l·ªói: ${error.message}`);
            if (attempt === retries) {
                console.error(`Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh t·ª´ ${url} sau ${retries} l·∫ßn th·ª≠.`);
                return false;
            }
        }
    }
}

module.exports = {
    name: 'wallpaper',
    info: 'G·ª≠i 4 h√¨nh n·ªÅn ƒë·∫πp cho Windows ho·∫∑c ƒëi·ªán tho·∫°i.',
    dev: 'HNT',
    onPrefix: true, 
    dmUser: false, 
    nickName: ['wallpaper', 'h√¨nhn·ªÅn'], 
    usages: 'wallpaper',
    cooldowns: 5, 

    onLaunch: async function ({ api, event }) {
        const { threadID, messageID } = event;

        try {
            api.sendMessage(`[üîÑ]‚ûú Vui l√≤ng ƒë·ª£i h·ªá th·ªëng cung c·∫•p ·∫£nh...`, threadID); 

            const imageUrls = await getRandomWallpapers();
            const outputPaths = imageUrls.map((_, index) => path.resolve(cacheDir, `wallpaper${index + 1}.jpg`));

            let successfulDownloads = 0;

            for (let i = 0; i < imageUrls.length; i++) {
                const success = await downloadImage(imageUrls[i], outputPaths[i]);
                if (success) {
                    successfulDownloads++;
                } else {
                    outputPaths[i] = null; 
                }
                if (i < imageUrls.length - 1) { 
                    await delay(2000); 
                }
            }

            const validOutputPaths = outputPaths.filter(path => path !== null);

            if (validOutputPaths.length === 0) {
                throw new Error('Kh√¥ng th·ªÉ t·∫£i b·∫•t k·ª≥ h√¨nh ·∫£nh n√†o.');
            }

            const attachments = validOutputPaths.map(filePath => fs.createReadStream(filePath));

            const successMessage = `üì±üåü H√¨nh n·ªÅn ƒë·∫πp cho b·∫°n! üåüüì±\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n[‚úîÔ∏è]‚ûú ${successfulDownloads} h√¨nh n·ªÅn ƒë√£ ƒë∆∞·ª£c g·ª≠i.`;

            api.sendMessage({ body: successMessage, attachment: attachments }, threadID, () => {
                validOutputPaths.forEach(filePath => {
                    try {
                        fs.unlinkSync(filePath);
                    } catch (unlinkError) {
                        console.error(`Kh√¥ng th·ªÉ x√≥a t·ªáp ${filePath}: ${unlinkError.message}`);
                    }
                });
            });

        } catch (error) {
            api.sendMessage(`[‚ùó]‚ûú ƒê√£ x·∫£y ra l·ªói: ${error.message}. Vui l√≤ng th·ª≠ l·∫°i sau.`, threadID, messageID);
        }
    }
};
